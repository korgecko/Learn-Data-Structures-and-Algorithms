# 모험가의 총 수(N)를 입력받습니다. 이 문제에서는 N을 직접 사용하지는 않습니다.
n = int(input())

# 각 모험가의 공포도를 리스트 형태로 입력받습니다.
# 예: "2 3 1 2 2" -> [2, 3, 1, 2, 2]
data = list(map(int, input().split()))

# 그리디 알고리즘의 핵심: 공포도가 낮은 순서대로 처리하기 위해 리스트를 오름차순으로 정렬합니다.
# [2, 3, 1, 2, 2] -> [1, 2, 2, 2, 3]
data.sort()

# 최종적으로 결성된 그룹의 수를 저장할 변수입니다.
number_of_groups = 0

# 현재 그룹에 포함된 모험가의 수를 저장할 변수입니다.
count_adventurer = 0

# 공포도가 낮은 모험가부터 한 명씩 확인합니다.
for i in data:
    # 현재 그룹에 해당 모험가를 포함시킵니다.
    count_adventurer += 1

    # 현재 그룹에 포함된 모험가의 수가 현재 확인하는 모험가의 공포도 이상이라면, 그룹을 결성할 수 있습니다.
    # (오름차순 정렬했으므로, 현재 모험가의 공포도는 이 그룹 내에서 가장 높은 공포도입니다.)
    if count_adventurer >= i:
        # 그룹 결성에 성공했으므로, 총 그룹 수를 1 증가시킵니다.
        number_of_groups += 1

        # 새로운 그룹을 만들어야 하므로, 현재 그룹의 모험가 수를 0으로 초기화합니다.
        count_adventurer = 0

# 최종 결성된 그룹의 수를 출력합니다.
print(number_of_groups)
